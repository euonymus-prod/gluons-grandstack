directive @isAuthenticated on OBJECT | FIELD_DEFINITION
directive @hasRole(roles: [String]) on OBJECT | FIELD_DEFINITION

interface Quark {
<%= quarkFields %>
}

type PublicQuark implements Quark {
<%= quarkFields %>
  gluons: [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWherePublicObject %> RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects: [PublicQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWherePublicObject %> RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type LoggedInQuark implements Quark {
<%= quarkFields %>
  gluons(user_id: Int): [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %> RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects(user_id: Int): [LoggedInQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %> RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type AdminQuark implements Quark {
<%= quarkFields %>
  gluons(user_id: Int): [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects(user_id: Int): [AdminQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type Gluon {
<%= gluonFields %>
}

type QuarkLabel {
  id: ID!
  label: String
  image_path: String
  sort: Int
}

type GluonType {
  id: ID!
  type: String
  caption: String
  caption_ja: String
}

type QuarkProperty {
  id: ID!
  caption: String
  caption_ja: String
  qpropertyGtypes: [QpropertyGtype]
  gluons(subject: String): [Gluon]
    @cypher(
      statement: "MATCH (subject { name: $subject })-[gluon]-(object) RETURN gluon, object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type QpropertyGtype {
  gluon_type_id: String!
  direction: Int
  caption: String
  caption_ja: String
}

enum Role {
  reader
  user
  admin
}

type Query {
  quark(name: String): PublicQuark
    @cypher(
      statement: "MATCH (node {name: $name}) WHERE <%= cypherWherePublic %> RETURN node"
    )
  loggedInQuark(name: String, user_id: Int): LoggedInQuark @hasRole(roles:[admin, user])
    @cypher(
      statement: "MATCH (node {name: $name}) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> RETURN node"
    )
  adminQuark(name: String): AdminQuark @hasRole(roles:[admin])
    @cypher(
      statement: "MATCH (node {name: $name}) RETURN node"
    )
  quarks(first: Int = 100): [PublicQuark]
    @cypher(
      statement: "MATCH (node) WHERE <%= cypherWherePublic %> RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  loggedInQuarks(first: Int = 100, user_id: Int): [LoggedInQuark] @hasRole(roles:[admin, user])
    @cypher(
      statement: "MATCH (node) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  adminQuarks(first: Int = 100): [AdminQuark] @hasRole(roles:[admin])
    @cypher(
      statement: "MATCH (node) RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  searchQuarks(first: Int = 100, keyword: String): [PublicQuark]
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node WHERE <%= cypherWherePublic %> RETURN node"
    )
  loggedInSearchQuarks(first: Int = 100, keyword: String, user_id: Int): [LoggedInQuark] @hasRole(roles:[admin, user])
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> RETURN node"
    )
  adminSearchQuarks(first: Int = 100, keyword: String): [AdminQuark] @hasRole(roles:[admin])
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node RETURN node"
    )
  editingQuark(id: ID, user_id: Int): LoggedInQuark @hasRole(roles:[admin, user])
    @cypher(
      statement: "MATCH (node {id: $id}) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> RETURN node"
    )
  editingGluon(id: ID, user_id: Int): Gluon @isAuthenticated
    @cypher(
      statement: "MATCH (active)-[relation {id: $id}]->(passive) RETURN relation"
    )
  quarksBySubstring(first: Int = 100, substring: String): [Quark]
    @cypher(
      statement: "MATCH (node) WHERE node.name CONTAINS $substring RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  quarkProperties(ids: [Int] = []): [QuarkProperty]
  qpropertyGtypes(quarkPropertyId: Int = null, avoidQuarkPropertyIds: [Int] = []): [QpropertyGtype]
  quarkLabels: [QuarkLabel]
  gluonTypes: [GluonType]
}

type Mutation {
  CreateQuark(
    <%= quarkMutateFields %>
  ): LoggedInQuark @hasRole(roles:[admin, user])
  UpdateQuark(
    id: ID!
    <%= quarkMutateFields %>
  ): LoggedInQuark @hasRole(roles:[admin, user])
  DeleteQuark(
    id: ID!
    user_id: Int
  ): LoggedInQuark @hasRole(roles:[admin, user])
    @cypher(
      statement: "MATCH (node {id: $id}) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> DETACH DELETE node"
    )

  CreateGluon(
    active_id: ID!
    passive_id: ID
    passive: String
    <%= gluonMutateFields %>
  ): Gluon @hasRole(roles:[admin, user])
  UpdateGluon(
    id: ID!
    <%= gluonMutateFields %>
  ): Gluon @hasRole(roles:[admin, user])
  DeleteGluon(
    id: ID!
    user_id: Int
  ): LoggedInQuark @hasRole(roles:[admin, user])
    @cypher(
      statement: "MATCH ()-[relation {id: $id}]-() WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> DELETE relation"
    )
}

