directive @isAuthenticated on OBJECT | FIELD_DEFINITION
directive @isAuthorized on OBJECT | FIELD_DEFINITION

interface Quark {
<%= quarkFieldsAll %>
}
type GluedQuark implements Quark {
<%= quarkFieldsAll %>
  gluon: Gluon
    @cypher(
      statement: "WITH $this as this RETURN this.gluon"
    )
  objects(name: String = "", user_id: String = "", is_admin: Boolean = false): [GluedQuark]
    @cypher(
      statement: "MATCH (node:Quark {id: this.id})-[gluon]-(object) WHERE (((object.name_ja IS NULL) OR (object.name_ja <> $name)) AND ((object.name IS NULL) OR (object.name <> $name))) AND CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublicObject %>) ELSE (<%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %>) END END RETURN object{.*, gluon: gluon } ORDER BY <%=cypherOrderByStartDesc %>"
    )
}
type TopQuark implements Quark {
<%= quarkFieldsAll %>
  objects(user_id: String = "", is_admin: Boolean = false): [GluedQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublicObject %>) ELSE (<%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %>) END END RETURN object{.*, gluon: gluon } ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type Gluon {
<%= gluonFieldsAll %>
  active(user_id: String): TopQuark
    @cypher(
      statement: "MATCH (active)-[this]->(passive) RETURN active"
    )
  passive(user_id: String): TopQuark
    @cypher(
      statement: "MATCH (active)-[this]->(passive) RETURN passive"
    )
}

type QuarkLabel {
  id: ID!
  label: String
  image_path: String
  sort: Int
}

type GluonType {
  id: ID!
  type: String
  caption: String
  caption_ja: String
}

type QuarkProperty {
  id: ID!
  caption: String
  caption_ja: String
  qpropertyGtypes: [QpropertyGtype]
  objects(subject: String): [GluedQuark]
}

type QpropertyGtype {
  gluon_type_id: String!
  direction: Int
  caption: String
  caption_ja: String
}

enum Role {
  reader
  user
  admin
}

type Query {
  quark(name: String, user_id: String = "", is_admin: Boolean = false): TopQuark @isAuthorized
    @cypher(
      statement: "MATCH (node:Quark) WHERE (node.name = $name OR node.name_ja = $name) AND CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublic %>) ELSE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) END END RETURN node LIMIT 1"
    )
  quarks(first: Int = 100, user_id: String = "", is_admin: Boolean = false): [TopQuark]
    @cypher(
      statement: "MATCH (node) WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublic %>) ELSE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) END END RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  searchQuarks(first: Int = 100, keyword: String, user_id: String = "", is_admin: Boolean = false): [TopQuark]
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublic %>) ELSE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) END END RETURN node"
    )
  topQuarks: [TopQuark]
    @cypher(
      statement: "MATCH (node:Quark) WHERE <%= cypherWherePublic %> AND <%= cypherWhereTopNodes %> RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  editingQuark(id: ID, user_id: String): TopQuark @isAuthorized
    @cypher(
      statement: "MATCH (node:Quark {id: $id}) WHERE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) RETURN node"
    )
  editingGluon(id: ID, user_id: String): Gluon @isAuthenticated
    @cypher(
      statement: "MATCH (active)-[relation {id: $id}]->(passive) RETURN relation"
    )
  quarksBySubstring(first: Int = 100, substring: String): [Quark]
    @cypher(
      statement: "MATCH (node) WHERE node.name CONTAINS $substring RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  quarkProperties(ids: [Int] = []): [QuarkProperty]
  qpropertyGtypes(quarkPropertyId: Int = null, avoidQuarkPropertyIds: [Int] = []): [QpropertyGtype]
  quarkLabels: [QuarkLabel]
  gluonTypes: [GluonType]
}

type Mutation {
  CreateQuark(
    <%= quarkMutateFields %>
  ): TopQuark @isAuthenticated
  UpdateQuark(
    id: ID!
    <%= quarkMutateFields %>
  ): TopQuark @isAuthenticated
  DeleteQuark(
    id: ID!
    user_id: String
  ): TopQuark @isAuthorized
    @cypher(
      statement: "MATCH (node:Quark {id: $id}) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> DETACH DELETE node"
    )

  CreateGluon(
    active_id: ID!
    passive_id: ID
    passive: String
    <%= gluonMutateFields %>
  ): Gluon @isAuthenticated
  UpdateGluon(
    id: ID!
    <%= gluonMutateFields %>
  ): Gluon @isAuthenticated
  DeleteGluon(
    id: ID!
    user_id: String
  ): TopQuark @isAuthorized
    @cypher(
      statement: "MATCH ()-[relation {id: $id}]-() WHERE <%= cypherWhereUsersRelation %> OR <%= cypherWherePublicRelation %> DELETE relation"
    )
}

