directive @isAuthenticated on OBJECT | FIELD_DEFINITION
directive @isAuthorized on OBJECT | FIELD_DEFINITION

interface Quark {
<%= quarkFieldsAll %>
}
type PublicGluedQuark implements Quark {
<%= quarkFieldsAll %>
<%= gluonFields %>
<%= gluedCommonFields %>
gluon: Gluon
    @cypher(
      statement: "WITH {this} as this RETURN this.gluon"
    )
}
type PublicQuark implements Quark {
<%= quarkFieldsAll %>
  gluons(user_id: String = "dummy", is_admin: Boolean = false): [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublicObject %>) ELSE (<%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %>) END END RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects(user_id: String = "dummy", is_admin: Boolean = false): [PublicQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublicObject %>) ELSE (<%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %>) END END RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects2(user_id: String = "dummy", is_admin: Boolean = false): [PublicQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublicObject %>) ELSE (<%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %>) END END RETURN object{.*, gluon: gluon } ORDER BY <%=cypherOrderByStartDesc %>"
    )
  gluon: Gluon
    @cypher(
      statement: "WITH {this} as this RETURN this.gluon"
    )
  test: [PublicQuark]
    @cypher(
      statement: "WITH {this} as this MATCH (node:Quark {id: this.id})-[gluon]-(object) RETURN object{.*, gluon: gluon }"
    )
}

type Gluon {
<%= gluonFieldsAll %>
}

type ExpandedGluon {
<%= gluonFieldsAll %>
  active(user_id: String): PublicQuark
    @cypher(
      statement: "MATCH (active)-[this]->(passive) RETURN active"
    )
  passive(user_id: String): PublicQuark
    @cypher(
      statement: "MATCH (active)-[this]->(passive) RETURN passive"
    )
}

type QuarkLabel {
  id: ID!
  label: String
  image_path: String
  sort: Int
}

type GluonType {
  id: ID!
  type: String
  caption: String
  caption_ja: String
}

type QuarkProperty {
  id: ID!
  caption: String
  caption_ja: String
  qpropertyGtypes: [QpropertyGtype]
  gluons(subject: String): [Gluon]
    @cypher(
      statement: "MATCH (subject:Quark { name: $subject })-[gluon]-(object) RETURN gluon, object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type QpropertyGtype {
  gluon_type_id: String!
  direction: Int
  caption: String
  caption_ja: String
}

enum Role {
  reader
  user
  admin
}

type Query {
  quark(name: String, user_id: String = "dummy", is_admin: Boolean = false): PublicQuark @isAuthorized
    @cypher(
      statement: "MATCH (node:Quark) WHERE (node.name = $name OR node.name_ja = $name) AND CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublic %>) ELSE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) END END RETURN node LIMIT 1"
    )
  quarks(first: Int = 100, user_id: String = "dummy", is_admin: Boolean = false): [PublicQuark]
    @cypher(
      statement: "MATCH (node) WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublic %>) ELSE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) END END RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  searchQuarks(first: Int = 100, keyword: String, user_id: String = "dummy", is_admin: Boolean = false): [PublicQuark]
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node WHERE CASE WHEN $is_admin THEN (1 = 1) ELSE CASE WHEN $user_id is null THEN (<%= cypherWherePublic %>) ELSE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) END END RETURN node"
    )
  topQuarks: [PublicQuark]
    @cypher(
      statement: "MATCH (node:Quark) WHERE <%= cypherWherePublic %> AND <%= cypherWhereTopNodes %> RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  editingQuark(id: ID, user_id: String): PublicQuark @isAuthorized
    @cypher(
      statement: "MATCH (node:Quark {id: $id}) WHERE (<%= cypherWhereUsersNode %> OR <%= cypherWherePublic %>) RETURN node"
    )
  editingGluon(id: ID, user_id: String): ExpandedGluon @isAuthenticated
    @cypher(
      statement: "MATCH (active)-[relation {id: $id}]->(passive) RETURN relation"
    )
  quarksBySubstring(first: Int = 100, substring: String): [Quark]
    @cypher(
      statement: "MATCH (node) WHERE node.name CONTAINS $substring RETURN node ORDER BY <%= cypherOrderByCreatedDesc %>"
    )
  quarkProperties(ids: [Int] = []): [QuarkProperty]
  qpropertyGtypes(quarkPropertyId: Int = null, avoidQuarkPropertyIds: [Int] = []): [QpropertyGtype]
  quarkLabels: [QuarkLabel]
  gluonTypes: [GluonType]
}

type Mutation {
  CreateQuark(
    <%= quarkMutateFields %>
  ): PublicQuark @isAuthenticated
  UpdateQuark(
    id: ID!
    <%= quarkMutateFields %>
  ): PublicQuark @isAuthenticated
  DeleteQuark(
    id: ID!
    user_id: String
  ): PublicQuark @isAuthorized
    @cypher(
      statement: "MATCH (node:Quark {id: $id}) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> DETACH DELETE node"
    )

  CreateGluon(
    active_id: ID!
    passive_id: ID
    passive: String
    <%= gluonMutateFields %>
  ): Gluon @isAuthenticated
  UpdateGluon(
    id: ID!
    <%= gluonMutateFields %>
  ): Gluon @isAuthenticated
  DeleteGluon(
    id: ID!
    user_id: String
  ): PublicQuark @isAuthorized
    @cypher(
      statement: "MATCH ()-[relation {id: $id}]-() WHERE <%= cypherWhereUsersRelation %> OR <%= cypherWherePublicRelation %> DELETE relation"
    )
}

