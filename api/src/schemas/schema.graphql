directive @isAuthenticated on OBJECT | FIELD_DEFINITION
directive @hasRole(roles: [String]) on OBJECT | FIELD_DEFINITION

interface Quark {
<%= quarkFields %>
}

type PublicQuark implements Quark {
<%= quarkFields %>
  gluons: [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWherePublicObject %> RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects: [PublicQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWherePublicObject %> RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type LoggedInQuark implements Quark {
<%= quarkFields %>
  gluons(user_id: Int): [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %> RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects(user_id: Int): [LoggedInQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> WHERE <%= cypherWhereUsersObject %> OR <%= cypherWherePublicObject %> RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type AdminQuark implements Quark {
<%= quarkFields %>
  gluons(user_id: Int): [Gluon]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> RETURN gluon ORDER BY <%=cypherOrderByStartDesc %>"
    )
  objects(user_id: Int): [AdminQuark]
    @cypher(
      statement: "MATCH <%= cypherMatchNeighbor %> RETURN object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type Gluon {
<%= gluonFields %>
}

type QuarkProperty {
  id: ID!
  caption: String
  caption_ja: String
  qpropertyGtypes: [QpropertyGtype]
  gluons(subject: String): [Gluon]
    @cypher(
      statement: "MATCH (subject { name: $subject })-[gluon]-(object) RETURN gluon, object ORDER BY <%=cypherOrderByStartDesc %>"
    )
}

type QpropertyGtype {
  gluon_type_id: String!
  direction: Int
  caption: String
  caption_ja: String
}

enum Role {
  reader
  user
  admin
}

type Query {
  Quark(name: String): PublicQuark @hasRole(roles:[admin, user, reader])
    @cypher(
      statement: "MATCH (node {name: $name}) WHERE <%= cypherWherePublic %> RETURN node"
    )
  LoggedInQuark(name: String, user_id: Int): LoggedInQuark @hasRole(roles:[admin, user])
    @cypher(
      statement: "MATCH (node {name: $name}) WHERE <%= cypherWhereUsersNode %> OR <%= cypherWherePublic %> RETURN node"
    )
  AdminQuark(name: String, user_id: Int): AdminQuark @hasRole(roles:[admin])
    @cypher(
      statement: "MATCH (node {name: $name}) RETURN node"
    )
  quarks(first: Int = 100): [Quark] @isAuthenticated
    @cypher(
      statement: "MATCH (node) RETURN node ORDER BY (CASE node.created WHEN null THEN {} ELSE node.created END) DESC"
    )
  quarksBySubstring(first: Int = 100, substring: String): [Quark]
    @cypher(
      statement: "MATCH (node) WHERE node.name CONTAINS $substring RETURN node ORDER BY (CASE node.created WHEN null THEN {} ELSE node.created END) DESC"
    )
  searchQuarks(first: Int = 100, keyword: String): [Quark]
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node RETURN node"
    )
  quarkProperties(ids: [Int] = []): [QuarkProperty]
  qpropertyGtypes(quarkPropertyId: Int = null, avoidQuarkPropertyIds: [Int] = []): [QpropertyGtype]
}

