directive @isAuthenticated on OBJECT | FIELD_DEFINITION

type Quark {
  id: ID!
  name: String
  en_name: String
  image_path: String
  description: String
  en_description: String
  start: _Neo4jDateTime
  end: _Neo4jDateTime
  start_accuracy: String
  end_accuracy: String
  is_momentary: Boolean
  url: String
  affiliate: String
  gender: Int
  is_private: Boolean
  is_exclusive: Boolean
  user_id: Int
  last_modified_user: Int
  quark_type_id: Int
  created: _Neo4jDateTime
  modified: _Neo4jDateTime
  properties: [QuarkProperty] @neo4j_ignore
  gluons: [Gluon]
    @cypher(
      statement: "MATCH (this)-[gluon]-(object) RETURN gluon ORDER BY (CASE gluon.start WHEN null THEN {} ELSE gluon.start END) DESC, (CASE object.start WHEN null THEN {} ELSE object.start END) DESC"
    )
  objects: [Quark]
    @cypher(
      statement: "MATCH (this)-[gluon]-(object) RETURN object ORDER BY (CASE gluon.start WHEN null THEN {} ELSE gluon.start END) DESC, (CASE object.start WHEN null THEN {} ELSE object.start END) DESC"
    )
}

type Gluon {
  id: ID!
  active_id: String
  passive_id: String
  relation: String
  prefix: String
  suffix: String
  start: _Neo4jDateTime
  end: _Neo4jDateTime
  start_accuracy: String
  end_accuracy: String
  is_momentary: Boolean
  is_exclusive: Boolean
  user_id: Int
  last_modified_user: Int
  gluon_type_id: Int
  created: _Neo4jDateTime
  modified: _Neo4jDateTime
  object_id: ID
}

type QuarkProperty {
  id: ID!
  caption: String
  caption_ja: String
  qpropertyGtypes: [QpropertyGtype]
  gluons(subject: String): [Gluon]
    @cypher(
      statement: "MATCH (subject { name: $subject })-[gluon]-(object) RETURN gluon, object ORDER BY (CASE gluon.start WHEN null THEN {} ELSE gluon.start END) DESC, (CASE object.start WHEN null THEN {} ELSE object.start END) DESC"
    )
}

type QpropertyGtype {
  gluon_type_id: String!
  direction: Int
  caption: String
  caption_ja: String
}


type User {
  id: ID!
  name: String
  friends: [User] @relation(name: "FRIENDS", direction: "BOTH")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  recommendations(first: Int = 3): [Business] @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) )WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec")
}

type Business {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  Quark(name: String): Quark
    @cypher(
      statement: "MATCH (node {name: $name}) RETURN node"
    )
  quarks(first: Int = 100): [Quark] @isAuthenticated
    @cypher(
      statement: "MATCH (node) RETURN node ORDER BY (CASE node.created WHEN null THEN {} ELSE node.created END) DESC"
    )
  quarksBySubstring(first: Int = 100, substring: String): [Quark]
    @cypher(
      statement: "MATCH (node) WHERE node.name CONTAINS $substring RETURN node ORDER BY (CASE node.created WHEN null THEN {} ELSE node.created END) DESC"
    )
  searchQuarks(first: Int = 100, keyword: String): [Quark]
    @cypher(
      statement: "CALL db.index.fulltext.queryNodes(\\\"nameAndDescription\\\", $keyword) YIELD node RETURN node"
    )
  quarkProperties(ids: [Int] = []): [QuarkProperty]
  qpropertyGtypes(quarkPropertyId: Int = null, avoidQuarkPropertyIds: [Int] = []): [QpropertyGtype]
}

